package br.com.file.upload.db.local;

import java.sql.Blob;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

import br.com.file.upload.model.File;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FileDb implements Runnable {

    private static final Logger _logger = LoggerFactory.getLogger(FileDb.class);

    private static FileDb instance = null;

    private ScheduledThreadPoolExecutor executorSender = new ScheduledThreadPoolExecutor(1);

    @SuppressWarnings("unused")
    private volatile ScheduledFuture<?> self;

    private Connection connection = null;

    private Queue<File> files = new ConcurrentLinkedQueue<File>();

    public static FileDb getInstance() {
        if (instance == null)
            instance = new FileDb();
        return instance;
    }

    private FileDb() {

        try {
            Class.forName("org.hsqldb.jdbc.JDBCDriver");
        } catch (Exception e) {}

        while(!connect());

        init();

        this.self = executorSender.scheduleWithFixedDelay(this, 2, 1, TimeUnit.MINUTES);
    }

    private boolean connect() {
        try {
            this.connection = DriverManager.getConnection("jdbc:hsqldb:file:db/", "fdb", "fdb");
            this.connection.setAutoCommit(false);
            return true;
        } catch (Exception e) {}

        return false;
    }

    private void init() {
        String sql_1 = "CREATE CACHED TABLE IF NOT EXISTS FDB (id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY, bytes BLOB, name VARCHAR(255))";
        try {
            PreparedStatement ps = this.connection.prepareStatement(sql_1);
            ps.execute();
        } catch (Exception e) {
            _logger.error("", e);
        }
        String sql_2 = "SET FILES LOB SCALE 1";
        try {
            PreparedStatement ps = this.connection.prepareStatement(sql_2);
            ps.execute();
        } catch (Exception e) {
            _logger.error("", e);
        }
    }

    private void checkpoint() {
        try {
            this.connection.prepareStatement("CHECKPOINT DEFRAG").execute();
        } catch (Exception e) {}
    }

    public void insert(File file) {

        this.files.offer(file);
    }

    private boolean insertExec(File file) {

        String sql = "INSERT INTO FDB(bytes,name) VALUES (?, ?)";

        try {
            PreparedStatement ps = this.connection.prepareStatement(sql);

            Blob blob1 = this.connection.createBlob();
            blob1.setBytes(1, file.getContent());

            ps.setBlob(1, blob1);
            ps.setString(2, file.getName());
            ps.execute();

        } catch (Exception e) {
            _logger.error("", e);
            return false;
        }

        _logger.info("Insert: " + file.getName());
        return true;
    }

    public List<File> readAll() {

        List<File> files = new ArrayList<>(this.files);
        String sql = "SELECT * FROM FDB";

        try {
            PreparedStatement ps = this.connection.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {

                Blob blob1 = rs.getBlob(2);

                File file = new File();
                file.setId(rs.getInt(1));
                file.setContent(blob1.getBytes(1, (int) blob1.length()));
                file.setName(rs.getString(3));
                files.add(file);
            }
        } catch (Exception e) {
            _logger.error("", e);
        }

        _logger.info("ReadAll: " + files.size());
        return files;
    }

    public boolean delete(int id) {

        String sql = "DELETE FROM FDB WHERE ID = " + id;

        try {
            PreparedStatement ps = this.connection.prepareStatement(sql);
            ps.execute();
        } catch (Exception e) {
            _logger.error("", e);
            return false;
        }

        _logger.info("Delete: " + id);
        return true;
    }

    @SuppressWarnings("unchecked")
    public void run() {

        _logger.info("FileDb[Run]:" + this.files.size());

        try {
            int size = this.files.size();

            for (int i=0; i < size; i++) {

                File file = this.files.element();

                if(this.insertExec(file)) {
                    this.files.poll();
                }
            }

            this.checkpoint();
            this.connection.commit();

        } catch (Exception e) {
            _logger.warn("", e);
        }
    }

}
